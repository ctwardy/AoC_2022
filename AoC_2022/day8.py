# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/day8.ipynb.

# %% auto 0
__all__ = ['ex_heights', 'edges', 'vismap', 'scenic_scores', 'where_if', 'assert_all']

# %% ../nbs/day8.ipynb 9
#| code-fold: true
import numpy as np
ex_heights = np.array(ex_heights)

def edges(heights: np.array) -> np.array:
    """Return Boolean grid with only edges == 1"""
    x, y = heights.shape
    return np.pad(np.zeros((x-2, y-2), dtype=bool),
                  pad_width=1,
                  constant_values=1)

def vismap(heights: np.array) -> np.array:
    """Boolean map: is tree is tallest in some direction?"""
    rows, cols = heights.shape
    ans = edges(heights)
    for i in range(1, rows-1):
        for j in range(1, cols-1):
            height = heights[i,j]
            row, col = heights[i,:], heights[:,j]
            ans[i,j] = ((row[:j] < height).all() or
                        (col[:i] < height).all() or
                        (row[j+1:] < height).all() or
                        (col[i+1:] < height).all())
    return ans

# %% ../nbs/day8.ipynb 20
#| code-fold: true
def scenic_scores(heights: np.array) -> np.array:
    """Get scenic score of all trees from height map."""
    rows, cols = heights.shape
    ans = np.ones_like(heights)
    for i in range(rows):
        for j in range(rows):
            height = heights[i,j]
            row, col = heights[i,:], heights[:,j]
            #print(row, f"({height})")
            #print(where_if(row[:j] >= height))
            left = j - where_if(row[:j] >= height)[-1]
            up = i - where_if(col[:i] >= height)[-1]
            right = 1 + where_if(row[j+1:] >= height, cols-j-2)[0]
            down = 1 + where_if(col[i+1:] >= height, rows-i-2)[0]
            #print(f"({i},{j}):", left, up, right, down)
            
            ans[i,j] = left * up * right * down
    return ans

# %% ../nbs/day8.ipynb 21
#| code-fold: True
def where_if(x, _else=0): 
    """Returns where(x) or [_else] """
    _ = np.where(x)[0]
    return _ if len(_) != 0 else _else * np.ones(1) 

def assert_all(mybool: np.array) -> None:
    """Wraps assert (foo > bar).all()"""
    assert mybool.all()
