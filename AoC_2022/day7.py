# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/day7.ipynb.

# %% auto 0
__all__ = ['example', 'dirs', 'FileObj', 'File', 'Directory', 'get_all_subdirs', 'get_dirs', 'sum_cutoff']

# %% ../nbs/day7.ipynb 8
#| code-fold: true
from dataclasses import dataclass, field

@dataclass
class FileObj():
    """Base class for File & Directory. Has a name"""
    name: str
        
@dataclass
class File(FileObj):
    """Files have name and size"""
    size: int
        
    def __str__(me):
        return f"{me.name} (file, size={me.size})"

# %% ../nbs/day7.ipynb 11
#| code-fold: true
@dataclass
class Directory(FileObj):
    """Directories have kids (files or dirs), and PARENT"""
    parent: FileObj=None
    _kids: dict[str: FileObj] = field(default_factory=dict)
    
    @property
    def size(me):
        return sum(f.size for f in me._kids.values())
    
    @property
    def path(me) -> str:
        """The path/to/me/"""
        try:
            return f"{me.parent.path}{me.name}/"
        except AttributeError:
            return f"{me.name}/"
        
    @property
    def depth(me):
        """How far down the tree am me?"""
        return me.path.count("/") - me.path.count("//") - 1
    
    @property
    def subdirs(me):
        """My kids what has kids"""
        return [x for x in me if isinstance(x, Directory)]
        
    def append(me, obj: FileObj) -> None:
        """Shortcut : obj already has name; use as key."""
        me[obj.name] = obj
        
    def __str__(me):
        """Indented tree below me."""
        indent = "  " * me.depth
        head = f"{me.name} (dir, size={me.size})"
        tail = f"\n".join(f"{indent} - {val}" for val in me)  # uses __iter__
        return f"{head}\n{tail}"
    
    def __iter__(me):
        """Return iterator of objects (not names!) in _kids."""
        return iter(me._kids.values())
    
    def __getitem__(me, name: str) -> FileObj:
        """Get member FileObj by name. Or die."""
        return me._kids[name]

    def __setitem__(me, name: str, arg: FileObj) -> None:
        """Add {arg.name: arg} to _files; if possible, set arg.parent->me."""
        me._kids[name] = arg
        if isinstance(arg, Directory):
            if arg.parent is not None:
                raise(ValueError, "We are stealing someone else's kid!")
            arg.parent = me


# %% ../nbs/day7.ipynb 22
#| code-fold: true
def get_all_subdirs(start: Directory) -> list[Directory]:
    """Return flat list of (name, size) for _all_ dirs under `start` dir."""
    my_dirs = [(x.name, x.size) for x in start.subdirs]
    for _dir in start.subdirs:
        my_dirs.extend(get_all_subdirs(_dir))
    return my_dirs

# %% ../nbs/day7.ipynb 27
example = """
$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k
""".strip().split("\n")

# %% ../nbs/day7.ipynb 29
#| code-fold: true
def get_dirs(commands: list[str]) -> Directory:
    """Create dir tree from '/'. Return all dirs"""
    root = Directory("/")
    dirstack = [root]

    for i, line in enumerate(commands):
        cur_dir = dirstack[-1]
        match line.split():
            case ("$", "ls"):
                continue
            case ("dir", dirname):
                try:
                    cur_dir[dirname]  # Should fail, unless twice ls same dir
                    print("*********** {dirname} already in {cur_dir.name}!")
                except KeyError:
                    cur_dir.append(Directory(dirname))
            case ("$", "cd", dirname):
                match dirname:
                    case "/":
                        dirstack = [root]
                    case "..":
                        dirstack.pop()
                    case _: 
                        dirstack.append(cur_dir[dirname])
                depth = len(dirstack) - 1
                print(f'{"❚" * depth}\tfrom cd {dirname}\t in line {i}')
            case (size, name):
                f = File(name, int(size))
                cur_dir.append(f)
            case _:
                raise ValueError(f"Unrecognized line: '{line}'")
    return root
            
dirs = get_dirs(example)

# %% ../nbs/day7.ipynb 36
#| code-fold: true
def sum_cutoff(start: Directory, cutoff=100_000) -> int:
    subdirs = get_all_subdirs(start)
    sizes = [x[1] for x in subdirs if x[1] < 100_000]
    return sum(x for x in sizes if x <= cutoff)
