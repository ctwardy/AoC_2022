# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/day5.ipynb.

# %% auto 0
__all__ = ['get_state', 'print_state', 'stackify', 'print_stacks', 'get_moves', 'print_moves', 'move', 'move1box', 'top_crates',
           'moveall']

# %% ../nbs/day5.ipynb 9
#| code-fold: true
def get_state(rowdata: list[str]  # Data as if readlines
            )-> list[list[str]]:  # Row-oriented list, top-down
    ncols = len(rowdata[0])
    nrows = rowdata.index("") - 1
    return [[row[i] 
             for i in range(1, ncols, 4)]
            for row in rowdata[:nrows]]

def print_state(state: list[list[str]])-> None:
    """Print a picture of the state. Stacks should be vertical."""
    print("\n".join(" ".join(x) for x in state))
    print(" ".join(f"{i+1}" for i in range(len(state[0]))))


# %% ../nbs/day5.ipynb 14
#| code-fold: true
def stackify(state: list[list] # Crate state in visual format
            )-> list[deque]:   # State as list of stacks, no blanks
    """Convert row-oriented input to compact stacks, top=right."""
    nrows, ncols = len(state), len(state[0])
    return [deque([state[row][col] for row in range(nrows-1,-1,-1)
                if state[row][col] != " "])
            for col in range(ncols)]

def print_stacks(stacks: list[deque])-> None:
    """Print a horizontally-oriented picture of stacks"""
    N = max(len(row) for row in stacks)
    pad = ["  "*(N - len(row)) for row in stacks]
    for i, stack in enumerate(stacks):
        print(f"{(i+1)} {' '.join(stack)}{pad[i]}")

# %% ../nbs/day5.ipynb 18
def get_moves(rowdata: list[str]  # As from readlines
             )-> list[list[int]]: # [[n, from_col, to_col], ...
    """Extract move data from input"""
    start = rowdata.index("") + 1
    moves = ("\n".join(rowdata[start:])
             .replace(" ", "")
             .replace("move", "")
             .replace("from", ",")
             .replace("to", ",")
             .split("\n")#[:-1]
            )
    return [x.split(",") for x in moves]

def print_moves(moves: list[list[int]])-> None:
    """Verbosely print a terse movelist."""
    print("\n".join(f"Move {n} from {old} to {new}" for n, old, new in moves))

# %% ../nbs/day5.ipynb 21
#| code-fold: true
def move(
    n:    int|str,     # Move this many
    from_col: int|str, # From this stack
    to_col:   int|str, # To this stack
    pos:  list,        # Position -> Will be CHANGED!
    )-> None:
    """Move `n` crates from `from_col` to `to_col`. Modifies in place."""
    n, from_col, to_col = int(n), int(from_col), int(to_col)
    for i in range(n):
        move1box(pos[from_col - 1], pos[to_col - 1])

def move1box(
    from_stack: deque, # From this stack
    to_stack:   deque, # To this stack
    )-> None:          # Modifies in place
    """Move 1 crates from `from_stack` to `to_stack`."""
    to_stack.append(from_stack.pop())


# %% ../nbs/day5.ipynb 38
#| code-fold: true
def top_crates(stacks: list[deque]  # List of stacks
              )-> str:              # Crates on top
    """Find the crates on top of each stack"""
    return "".join(stack[-1] for stack in stacks)

# %% ../nbs/day5.ipynb 49
#| code-fold: true
def moveall(
    n:    int|str,     # Move this many
    from_col: int|str, # From this stack
    to_col:   int|str, # To this stack
    pos:  list,        # Position -> Will be CHANGED!
    )-> None:
    """Move `n` crates from `from_col` to `to_col` AS A GROUP."""
    n, from_col, to_col = int(n), int(from_col), int(to_col)
    old, new = pos[from_col - 1], pos[to_col - 1]
    for x in reversed([old.pop() for i in range(n)]):
        new.append(x)
